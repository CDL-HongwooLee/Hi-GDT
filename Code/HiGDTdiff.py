#!/home/hongb/anaconda3/bin/python3
import subprocess as sp
import argparse
import os
import pandas as pd
import numpy as np
import pickle
import time
from scipy import stats
from statsmodels.stats.multitest import multipletests

##usage
def parse_args():
    
    parser = argparse.ArgumentParser(description = "", formatter_class = argparse.RawTextHelpFormatter)
    parser.add_argument('-pkl1', dest = 'pickle1', required=True, help = 
    '''Path to the matrix1.pkl file for the control sample.
By default, this file is generated by HiGDT.py and is located at {outdir}/{prefix}.{resolution}{BP/FRAG}.matrix.pkl.
    ''')
    parser.add_argument('-pkl2', dest = 'pickle2', required=True, help = 
    '''Path to the matrix2.pkl file for the treat sample'
By default, this file is generated by HiGDT.py and is located at {outdir}/{prefix}.{resolution}{BP/FRAG}.matrix.pkl.
    ''')
    parser.add_argument('-b', dest = 'bedfile', required=True, help = 
    '''Path to the .bed file which includes genic information.
The 4th column should contain labels for each element.
    ''')
    parser.add_argument('-r', dest = 'refile', required=True, help = 
    '''Path to the fragment.bed file, which is composed of 'chromosome', 'fragment_start', 'fragment_end', 'fragment_number'.
The resolution of this file must match that of matrix.pkl files.
Both fixed intervals and restriction fragment intervals are allowed.
By default, this file is generated by HiGDT.py at {outdir}/{prefix}.{resolution}{BP/FRAG}.bed.
    ''') 
    parser.add_argument('-p', dest = 'prefix', required=True, help = 
    '''Prefix for naming output files.
    ''')
    parser.add_argument('-f', dest = 'flanking', default=2000, type=int, help = 
    '''The size of surrounding regions (bp) for the comparison.
The recommended range is 1000-3000 bp.
Default = 2000. 
    ''')
    parser.add_argument('-l', dest = 'lcut', default=1000, type=int, help = 
    '''The size cutoff (bp) of genes for the comparison. 
Should be larger than (resolution x 4).
Default = 1000.Å“
    ''')
    parser.add_argument('-fc', dest = 'fc', default=0.1, type=float, help = 
    '''The fold chage cutoff for comparing contact frequencies within gene body and surrounding flanking regions. 
The fold chage values of average contact frequency (CF) are calculated.
e.g. The value 0.1 indicates (Surrounding CF in treatment)/(Surrounding CF in control) < (1 - 0.1)
     & (Gene body CF in control)/(Gene body CF in treatment) < (1 - 0.1)
    ''')
    parser.add_argument('-c', dest = 'cutoff', default=0.05, type=float, help = 
    '''The statistical cutoff value for comparing surrounding contact frequencies.
Default = 0.05.
    ''')
    parser.add_argument('--pvalue', dest = 'fdr', action='store_false', help = 
    '''Using P-value instead of false discovery rate (fdr).
Default = False. (Use FDR)
    ''')
    parser.add_argument('-o', dest = 'outdir', default = './', help = 
    '''Path to the output directory where all output files will be written.
Default = './'.
    ''')
    parser.add_argument('--unnorm', dest = 'norm', action='store_false', help = 
    '''Normalize o/e values by the sum of genome-wide contact frequencies within gene body or surrounding regions.
Default = False. (Do normalization)
    ''')
    return parser.parse_args()

def MaketmpDir(outdir):
    if os.path.isdir(f'{outdir}') == False:
        os.mkdir(f'{outdir}')
    if os.path.isdir(f'{outdir}/tmp') == False:
        os.mkdir(f'{outdir}/tmp')

def getminMaxDF(outdir, prefix, bed, refile, f):
    sp.run(f'bedtools intersect -a {bed} -b {refile} -wo | datamash groupby 1,2,3,4,5,6 min 10 max 10 > {outdir}/tmp/{prefix}.Frag_minMax.txt', shell=True)
    sp.run(f"less {bed} | awk '{{if ($2-{f}>0) print $1, $2-{f}, $3+{f}, $4, $5, $6 ; else print $1, 1, $3+{f}, $4, $5, $6}}' OFS='\t' | bedtools intersect -a - -b {refile} -wo | datamash groupby 1,2,3,4,5,6 min 10 max 10 > {outdir}/tmp/{prefix}.Frag_minMax.flanking.txt", shell=True)
    minMax_raw = pd.read_csv(f'{outdir}/tmp/{prefix}.Frag_minMax.txt', sep='\t', header=None, names=['chrom', 'start', 'end', 'geneid', 'b', 'strand', 'frag1', 'frag2'])
    minMax_flank = pd.read_csv(f'{outdir}/tmp/{prefix}.Frag_minMax.flanking.txt', sep='\t', header=None, names=['chrom', 'start', 'end', 'geneid', 'b', 'strand', 'frag1', 'frag2'])
    return minMax_raw, minMax_flank

def getNormFactors(minMaxdf, pickle1, pickle2, lcut, minMaxf):
    Surr_norm1 = 0 ; Surr_norm2 = 0 ; GB_norm1 = 0 ; GB_norm2 = 0
    for x in range(len(minMaxdf)):
        chrom, start, end, _, _, _, target_i, target_j = minMaxdf.iloc[x,:].values
        length = end - start
        if length >= lcut:
            f_start, f_end = minMaxf.iloc[x,6:]
            if (target_i - f_start) * (f_end - target_j) != 0:
                v1 = np.mean(SurrContact(target_i, target_j, pickle1[chrom], f_start, f_end))
                v2 = np.mean(SurrContact(target_i, target_j, pickle2[chrom], f_start, f_end))
                Surr_norm1 = Surr_norm1 + v1
                Surr_norm2 = Surr_norm2 + v2
            if target_j - target_i > 0:
                v1 = np.mean(GBContact(target_i, target_j, pickle1[chrom], 2))
                v2 = np.mean(GBContact(target_i, target_j, pickle2[chrom], 2))
                GB_norm1 = GB_norm1 + v1
                GB_norm2 = GB_norm2 + v2
    return Surr_norm2/Surr_norm1, GB_norm2/GB_norm1

def compareRegion(minMaxdf, pickle1, pickle2, lcut, minMaxf, sf1, sf2, fc, cutoff, fdr, prefix):
    
    tmplist = []
    for x in range(len(minMaxdf)):
        chrom, start, end, geneid, _, _, target_i, target_j = minMaxdf.iloc[x,:].values
        length = end - start + 1
        if length >= lcut:
            f_start, f_end = minMaxf.iloc[x,6:]
            if (target_i - f_start) * (f_end - target_j) != 0:
                v1, v2, ustat1, p1 = getRegionDiff(target_i, target_j, pickle1[chrom], pickle2[chrom], f_start, f_end, sf1)
                gb1, gb2 = getmeanFCGB(target_i, target_j, pickle1[chrom], pickle2[chrom], sf2)
                if ustat1 != 'pass':
                    tmplist.append(pd.DataFrame([{'geneid' : geneid, 'length' : length, 'Surr1' : v1, 'Surr2' : v2, 'SurrD' : ustat1, 'p-value(surrounding)' : p1, 'GB1' : gb1, 'GB2' : gb2}]))
    outdf = pd.concat(tmplist, ignore_index=True)
    outdf['q-value(surrounding)'] = multipletests(outdf['p-value(surrounding)'].values, method='fdr_bh')[1]
    if fdr == True:
        conditions = [
            (outdf['q-value(surrounding)'] < cutoff)&(outdf['SurrD']=='Surr_decreased')&(outdf['Surr2'] < outdf['Surr1']*(1-fc))&(outdf['GB1'] < outdf['GB2']*(1-fc)),
            (outdf['q-value(surrounding)'] < cutoff)&(outdf['SurrD']=='Surr_increased')&(outdf['Surr1'] < outdf['Surr2']*(1-fc))&(outdf['GB2'] < outdf['GB1']*(1-fc))
            ]
    else:
        conditions = [
            (outdf['p-value(surrounding)'] < cutoff)&(outdf['SurrD']=='Surr_decreased')&(outdf['Surr2'] < outdf['Surr1']*(1-fc))&(outdf['GB1'] < outdf['GB2']*(1-fc)),
            (outdf['p-value(surrounding)'] < cutoff)&(outdf['SurrD']=='Surr_increased')&(outdf['Surr1'] < outdf['Surr2']*(1-fc))&(outdf['GB2'] < outdf['GB1']*(1-fc))
            ]
        
    outdf['ContactFC(surrounding)'] = outdf['Surr2']/outdf['Surr1']
    outdf['ContactFC(genebody)'] = outdf['GB2']/outdf['GB1']
    choices = ['Insulated in treatment', 'Insulated in control']
    outdf['Domain_change'] = np.select(conditions, choices, default = 'Not significant')
    finaldf = outdf[['geneid', 'p-value(surrounding)', 'q-value(surrounding)', 'ContactFC(surrounding)', 'ContactFC(genebody)', 'Domain_change']]
    #outdf.to_csv(f'/data/hongb/4_Callus_Hi-C/Final/final-test/{prefix}.tmp', sep='\t', index=False, header=False)
    return finaldf

def getRegionDiff(target_i, target_j, pickle1, pickle2, f_start, f_end, sf):
    
    region1 = [i * sf for i in SurrContact(target_i, target_j, pickle1, f_start, f_end)]
    region2 = SurrContact(target_i, target_j, pickle2, f_start, f_end)
    if sum(region1) == 0 and sum(region2) == 0:
        return 0, 0, 'pass', 1.0
    diff = np.array(region1) - np.array(region2)
    p = stats.wilcoxon(diff, zero_method='wilcox')[1]
    if len(diff[diff>0]) > len(diff[diff<0]):
        ustat = 'Surr_decreased'
    elif len(diff[diff>0]) < len(diff[diff<0]):
        ustat = 'Surr_increased'
    else:
        ustat = 'Surr_equal'
    return np.sum(region1)+1, np.sum(region2)+1, ustat, p

def getmeanFCGB(target_i, target_j, pickle1, pickle2, sf):
   
    region1 = [i * sf for i in GBContact(target_i, target_j, pickle1, 2)]
    region2 = GBContact(target_i, target_j, pickle2, 2)
    return np.sum(region1), np.sum(region2)

def SurrContact(target_i, target_j, mat, f_start, f_end):
    v1list = []
    for i in range(f_start, target_i):
        for j in range(target_i, f_end + 1):
            try:
                v1list.append(mat[str(i) + '\t' + str(j)])
            except KeyError:
                v1list.append(0)
    for i in range(target_i, target_j + 1):
        for j in range(target_j + 1, f_end + 1):
            try:
                v1list.append(mat[str(i) + '\t' + str(j)])
            except KeyError:
                v1list.append(0)
    return v1list

def GBContact(target_i, target_j, mat, k):
    v1list = []

    for i in range(target_i, target_j + 1):
        for j in range(i + k, target_j + 1):
            try:
                v1list.append(mat[str(i) + '\t' + str(j)])
            except KeyError:
                v1list.append(float(0))
    return v1list

if __name__ == '__main__':
    args = parse_args()

    MaketmpDir(args.outdir)
    start_time = time.time()
    with open(args.pickle1, 'rb') as pk1, open(args.pickle2, 'rb') as pk2:
        print(f'Load the first matrix......')
        mat1 = pickle.load(pk1)
        print(f'Load the second matrix......')
        mat2 = pickle.load(pk2)
    print(f'Load matrix time : {time.time() - start_time}')

    minMaxRaw, minMaxFlank = getminMaxDF(args.outdir, args.prefix, args.bedfile, args.refile, args.flanking)
    if args.norm == True:
        print(f'Calculate a normalization value...')
        sf1, sf2 = getNormFactors(minMaxRaw, mat1, mat2, args.lcut, minMaxFlank)
    else:
        sf1 = 1
        sf2 = 1
    print(f'Normalization factor : {sf1}, {sf2}')
    start_time = time.time()
    print(f'Compare regions......')
    finaldf = compareRegion(minMaxRaw, mat1, mat2, args.lcut, minMaxFlank, sf1, sf2, args.fc, args.cutoff, args.fdr, args.prefix)
    finaldf.to_csv(f'{args.outdir}/{args.prefix}.HiGDTdiff.out.txt', sep='\t', index=False, header=True)
    print(f'Analysis completed : {time.time() - start_time}')
    sp.run(f'rm {args.outdir}/tmp/{args.prefix}.Frag_minMax.txt {args.outdir}/tmp/{args.prefix}.Frag_minMax.flanking.txt', shell=True)
